@page "/MachineTypes"

@using ArticleApp.Models

@inject IMachineTypeRepository repository

@inject IJSRuntime JS

@using BmsPager;

@using System.Drawing

@attribute [AllowAnonymous]
@attribute [Authorize(Roles = "Administrators")]

@*<DulBreadcrumbsSimple>*@
    <ol class="breadcrumb">
        <li class="breadcrumb-item active">MachineType List</li>

        <LoginDisplay></LoginDisplay>
    </ol>
@*</DulBreadcrumbsSimple>*@

<div class="container-fluid">
    <div class="animated fadeIn">

        <div class="card">

            <div class="card-body">

                <h3>MachineType List</h3>

                <p>MachineType List</p>

                @if (machineTypes == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="text-nowrap text-center">#</th>
                                <th class="text-nowrap text-center">Name</th>
                                <th class="text-nowrap text-center">Edit</th>
                                <th class="text-nowrap text-center">Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var machineType in machineTypes)
                            {
                                <tr>
                                    <td class="text-nowrap text-center">@machineType.Id</td>
                                    <td class="text-nowrap text-center">@machineType.Name</td>
                                    <td class="text-nowrap text-center"><input type="button" value="Edit" class="btn btn-primary" data-toggle="modal" data-target="#MachineTypeEditorDialog" @onclick="(() => EditBy(machineType))" /></td>
                                    <td class="text-nowrap text-center"><input type="button" value="Delete" class="btn btn-danger" @onclick="(() => DeleteBy(machineType))" data-toggle="modal" data-target="#MachineTypeDeleteDialog" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

                <MachineTypePager Model="pager" PageIndexChanged="PageIndexChanged"></MachineTypePager>

                <div>
                    <input type="button" value="Add" data-toggle="modal" data-target="#MachineTypeEditorDialog" class="btn btn-primary" @onclick="(() => btnCreate_Click())" />
                </div>

                <MachineTypeDeleteDialog OnClick="btnDelete_Click"></MachineTypeDeleteDialog>

                <MachineTypeEditorForm EditorModel="@machineType" SaveOrUpdated="@SaveOrUpdated">
                    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
                </MachineTypeEditorForm>
            </div>
        </div>
    </div>
</div>

@code {
    private BmsPagerBase pager = new BmsPagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 10,
        PagerButtonCount = 5
    };

    private string editorFormTitle = "";
    private List<MachineType> machineTypes;
    private MachineType machineType = new MachineType(); // 선택한 항목 관리

    protected void btnCreate_Click()
    {
        editorFormTitle = "Create";
        machineType = new MachineType(); // 모델 클리어
    }

    protected override async Task OnInitializedAsync()
    {
        var pagingData = await repository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalCount;
        machineTypes = pagingData.Items.ToList();
    }

    protected async Task btnDelete_Click()
    {
        await repository.DeleteMachineTypeAsync(machineType.Id); // 삭제
        await JS.InvokeAsync<object>("closeModal", "MachineTypeDeleteDialog");
        var pagingData = await repository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalCount;
        machineTypes = pagingData.Items.ToList();
        machineType = new MachineType(); // 선택 항목 초기화
    }

    private void DeleteBy(MachineType mt)
    {
        machineType = mt;
    }

    private void EditBy(MachineType mt)
    {
        editorFormTitle = "Edit";
        machineType = mt;
    }

    // 등록 또는 수정 후 현재 페이지 다시 로드
    private async void SaveOrUpdated()
    {
        var pagingData = await repository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalCount;
        machineTypes = pagingData.Items.ToList();

        StateHasChanged();
    }

    // 페이저 버튼 클릭 콜백 메서드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = (pageIndex + 1);


        var pagingData = await repository.GetAllAsync(pager.PageIndex, pager.PageSize);
        machineTypes = pagingData.Items.ToList();

        StateHasChanged(); // 현재 컴포넌트 재로드
    }
}