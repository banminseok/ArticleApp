@page "/Articles/Edit/{Id:int}" 

@inject IArticleRepository ArticleRepository;
@inject NavigationManager NavigationManager;
@inject ILogger<Edit> Logger;

<h3>Edit</h3>
<div class="row">
    <div class="col-md-12">
        <EditForm Model="Model" method="post" FormName="editForm" OnValidSubmit="btnEdit_Click">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary class="text-danger" role="alert"></ValidationSummary>
            <div class="form-group row">
                <label for="id" class="col-sm-2 col-form-label">ID: </label>
                <div class="col-sm-10">
                    @Model.Id
                </div>
            </div>
            <div class="form-group">
                <label for="txtTitle">Title</label>
                <InputText id="txtTitle" class="form-control" @bind-Value="Model.Title"
                           placeholder="Enter Title"  />
                <ValidationMessage For="() => Model.Title" class="text-danger"></ValidationMessage>
            </div>
            <div class="form-group mt-1">
                <button type="submit" class="btn btn-primary" id="editFormSubmit">Edit</button>
                <a href="/Articles" class="btn btn-secondary">List</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private bool isInitialized = false;

    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    public Article Model { get; set; } = new Article();

    protected override async Task OnInitializedAsync()
    {
        //Model = await ArticleRepository.GetArticleByIdAsync(Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        Logger.LogInformation($"※※※[!] url : {NavigationManager.Uri} ");
        Logger.LogInformation($"※※※[!] isInitialized : {isInitialized.ToString()} ");
        if (!isInitialized)
        {
            Model = await ArticleRepository.GetArticleByIdAsync(Id);
            Logger.LogInformation("※※※[!] Call GetArticleByIdAsync ");
            isInitialized = true;
        }
    }

    protected async Task btnEdit_Click()
    {
        Logger.LogInformation("※※※[1]Edit Submit");
        //Logger.LogInformation($"※※※[2]Model.Id={Model.Id} Model.title={Model.Title}");
        Logger.LogInformation("=>Model: {@Model}", Model);

        await ArticleRepository.EditArticleAsync(Model);
        //상세 페이지로 이동
        NavigationManager.NavigateTo($"/Articles/Details/{Id}");
    }
}
