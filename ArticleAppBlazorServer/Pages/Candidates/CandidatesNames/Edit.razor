@page "/Candidates/CandidatesNames/Edit/{Id:int}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IDbContextFactory<CandidateAppDbContext> ContextFactoryInjector
@inject NavigationManager Nav

<PageTitle>CandidateName Edit</PageTitle>

<h3>Edit</h3>


<h4>Candidate</h4>
<hr />


@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible fade show" role="alert">
        @StatusMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>
    </div>
}


@if (Model is null && !Busy)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Not Found
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" ></button>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <ArticleAppBlazorServer.Pages.Candidates.CandidatesNames.Components.EditorForm Model="@Model" Busy="@Busy" IsEdit="@true"
            OnSubmitCallback="@OnSubmitCallback"
            OnCancelCallback="@GotoIndexPage">
            </ArticleAppBlazorServer.Pages.Candidates.CandidatesNames.Components.EditorForm>
        </div>
    </div>
}
<div class="form-group">
    <a href="/Candidates/CandidatesNames">Back to List</a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public CandidateName? Model { get; set; }

    public bool Busy { get; set; }

    public string? StatusMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Busy = true;

        try
        {
            using var ctx = ContextFactoryInjector.CreateDbContext();
            Model = await ctx.CandidatesNames.AsNoTracking().FirstOrDefaultAsync(it => it.Id == Id);
        }
        finally
        {
            Busy = false;
        }
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (Model is null || !isValid || Busy)
        {
            StatusMessage = $"";
            return;
        }
        Busy = true;
        try
        {
            using var ctx = ContextFactoryInjector.CreateDbContext();
            ctx.CandidatesNames.Update(Model);
            await ctx.SaveChangesAsync();

            //StatusMessage = "Success";
            await GotoIndexPage();
            //var result = await ProtectedLocalStore.GetAsync<int>("Page");
            //var currentPage = result.Success ? result.Value : 1;

            //Nav.NavigateTo($"/Candidates/{currentPage}");

        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            Busy = false;
        }

    }

    /// <summary>
    /// Alert 창을 닫기 위한 메소드
    /// </summary>
    /// <param name="args"></param>
    private void CloseAlert(MouseEventArgs args)
    {
        StatusMessage = null;
    }


    private async Task GotoIndexPage()
    {
        var result = await ProtectedLocalStore.GetAsync<int>("PageCandidateName");
        var currentPage = result.Success ? result.Value : 1;

        Nav.NavigateTo($"/Candidates/CandidatesNames/{currentPage}");
    }

}
