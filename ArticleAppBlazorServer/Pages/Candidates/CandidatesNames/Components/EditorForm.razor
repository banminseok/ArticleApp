@namespace ArticleAppBlazorServer.Pages.Candidates.CandidatesNames.Components

@if (Model is not null)
{
    <EditForm Model="Model" OnValidSubmit="FormSubmit" OnInValidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label class="control-label" for="txtFirstName">FirstName</label>
            <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="form-group">
            <label class="control-label" for="txtLastName">LastName</label>
            <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
            <ValidationMessage For="() => Model.LastName" />
        </div>
        <div class="form-group">
            <label class="control-label" for="txtLastName">MiddleName</label>
            <InputText @bind-Value="Model.MiddleName" id="txtMiddleName" class="form-control" placeholder="Enter MiddleName" />
            <ValidationMessage For="() => Model.MiddleName" />
        </div>
        <div class="form-group">
            @if (IsEdit)
            {
                <input type="submit" value="Edit" class="btn btn-primary" disabled="@Busy" />
                <input type="button" value="Cancel" class="btn btn-secondary" disabled="@Busy"
                       @onclick="HandleCancel" />
            }
            else
            {
                <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
            }
        </div>
        @* </form> *@
    </EditForm>
 }

@code{
    [Parameter]
    public CandidateName? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    protected async Task FormSubmit()
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {

            // 폼의 유효성이 통과되었으면 true를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    /// <summary>
    /// OnInValidSubmit
    /// 유효성 검사 실패 시 처리
    /// Blazor의 OnInvalidSubmit 이벤트는 유효성 검사에 실패했을 때 호출되며, 이벤트 핸들러는 EditContext 객체를 매개변수로 받을 수 있습니다. 이 EditContext는 폼의 상태와 유효성 검사 정보를 포함합니다.
    protected async Task HandleInvalidSubmit(EditContext editContext)
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {
            // 폼의 유효성이 통과되지않았으면 false를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(false);
        }
    }

    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    protected async Task HandleCancel()
    {
        if (OnCancelCallback.HasDelegate)
        {
            await OnCancelCallback.InvokeAsync();
        }
    }
}