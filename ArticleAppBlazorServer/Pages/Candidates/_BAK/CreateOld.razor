@* @page "/Candidates/Create" *@


@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject IJSRuntime JSRuntime
@inject ILogger<Create> LoggerReference

<PageTitle>Candidate Create</PageTitle>

<h3>Create</h3>
<hr />
@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible fade show" role="alert">
        @StatusMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseAlert"></button>

    </div>
}
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Model" OnValidSubmit="FormSubmit" OnInValidSubmit="@HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @* <form action="/Candidates/Create" method="post"> *@
            <div class="form-group">
                <label class="control-label" for="txtFirstName">FirstName</label>
                @* <input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" /> *@
                <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
                @* <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span> *@
                <ValidationMessage For="() => Model.FirstName" />
            </div>
            <div class="form-group">
                <label class="control-label" for="txtLastName">LastName</label>
                @* <input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" /> *@
                <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
                @* <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span> *@
                <ValidationMessage For="() => Model.LastName" />
            </div>
            <div class="form-group form-check">
                <label class="form-check-label" for="IsEnrollment">
                    @* <input class="form-check-input" type="checkbox" data-val="true" data-val-required="The IsEnrollment field is required." id="IsEnrollment" name="IsEnrollment" value="true" /> *@
                    <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input" />
                    Is Enrollment
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy"/>
            </div>
            @* </form> *@
        </EditForm>
    </div>
</div>
<div class="form-group">
    <a href="/Candidates">Back to List</a>
</div>

@code {
    public Candidate? Model { get; set; }

    //현재 상태 메시지
    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "YJ", LastName = "Park", IsEnrollment = true };
        Model = new(); // new Candidate(); 초기화
    }

    protected async Task FormSubmit()
    {
        // 전송 버튼을 누르고 아직 저장 완료가 되지 않았으면 진행 종료: 중복 입력 방지
        if (Busy)
        {
            return;
        }
        Busy = true;

        try
        {
            if (Model is not null)
            {
                Model.Age = 0;

                using (var ctx = _ContextFactory.CreateDbContext())
                {
                    ctx.Candidates.Add(Model);
                    await ctx.SaveChangesAsync();
                    LoggerReference.LogInformation($"※※※ ({nameof(FormSubmit)}):Candidate Create");

                    Model = new() { IsEnrollment = Model.IsEnrollment}; // new Candidate(); 초기화
                    //IsEnrollment 는 마지막에 입력된 값으로 초기화   
                }
                StatusMessage = "Success";
            }

        }
        catch (Exception e)
        {
            StatusMessage = "Error";
            LoggerReference.LogError($"※※※ Error ({nameof(FormSubmit)}):{e.Message}");
        }
        finally
        {
            Busy = false;
        }
    }
    /// <summary>
    /// Alert 창을 닫기 위한 메소드
    /// </summary>
    /// <param name="args"></param>

    /// <summary>
    /// OnInValidSubmit
    /// 유효성 검사 실패 시 처리
    /// Blazor의 OnInvalidSubmit 이벤트는 유효성 검사에 실패했을 때 호출되며, 이벤트 핸들러는 EditContext 객체를 매개변수로 받을 수 있습니다. 이 EditContext는 폼의 상태와 유효성 검사 정보를 포함합니다.
    protected async Task HandleInvalidSubmit(EditContext editContext)
    {
        var ValidationMessages = editContext.GetValidationMessages().ToList();
        // 로그에 메시지 출력
        foreach (var message in ValidationMessages)
        {
            LoggerReference.LogError($"Validation Error: {message}");
        }
        //LoggerReference.LogError($"※※※ Error1 Validation failed: {validationMessages.ToString()}");
        //LoggerReference.LogError($"※※※ Error2 (editContext.GetValidationMessages(FirstName)) : {editContext.GetValidationMessages(new FieldIdentifier(Model, nameof(Model.FirstName))).ToString()}");
        StatusMessage = "";
    }

    private void CloseAlert(MouseEventArgs args)
    {
        StatusMessage = null;
    }
}
