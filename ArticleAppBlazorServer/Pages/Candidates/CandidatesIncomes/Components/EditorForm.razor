@namespace ArticleAppBlazorServer.Pages.Candidates.CandidatesIncomes.Components

@if (Model is not null)
{
    <EditForm Model="@Model"
              OnValidSubmit="FormSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <InputText @bind-Value="Model.Source" id="txtSource" class="form-control" placeholder="Source of Income" />
                    <ValidationMessage For="() => Model.Source" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <InputNumber @bind-Value="Model.Amount" id="txtAmount"
                                     class="form-control text-end" placeholder="Annual Amount" />
                        <span class="input-group-text">.00</span>
                    </div>
                    <ValidationMessage For="() => Model.Amount" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @if (IsEdit)
                    {
                        <input type="submit" value="Edit" class="btn btn-primary" disabled="@Busy" />
                        <input type="button" value="Cancel" class="btn btn-secondary" disabled="@Busy"
                               @onclick="HandleCancel" />
                    }
                    else
                    {
                        <input type="submit" value="Add" class="btn btn-success form-control" disabled="@Busy" />
                    }
                </div>
            </div>
        </div>
    </EditForm>
 }

@code{
    [Parameter]
    public CandidateIncome? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    protected async Task FormSubmit()
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {

            // 폼의 유효성이 통과되었으면 true를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    /// <summary>
    /// OnInValidSubmit
    /// 유효성 검사 실패 시 처리
    /// Blazor의 OnInvalidSubmit 이벤트는 유효성 검사에 실패했을 때 호출되며, 이벤트 핸들러는 EditContext 객체를 매개변수로 받을 수 있습니다. 이 EditContext는 폼의 상태와 유효성 검사 정보를 포함합니다.
    protected async Task HandleInvalidSubmit(EditContext editContext)
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {
            // 폼의 유효성이 통과되지않았으면 false를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(false);
        }
    }

    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    protected async Task HandleCancel()
    {
        if (OnCancelCallback.HasDelegate)
        {
            await OnCancelCallback.InvokeAsync();
        }
    }
}