@page "/Candidates/CandidatesIncomes/Manage"

@using Microsoft.EntityFrameworkCore

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@* @inject CandidateAppDbContext _Context *@
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject ILogger<Index> LoggerReference

<PageTitle>Manage</PageTitle>

<h1>CandidatesIncomes List</h1>

<div class="row">
    <div id="pnlNames">
        <span class="fw-bold">Have you ever used or been known by any other name(s)?&nbsp;&nbsp;</span>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" value="Yes" name="optNames" id="namesYes"
                   checked="@(blnNames == true)"
                   @onchange="@(() => { blnNames = !blnNames; })" />
            <label class="form-check-label" for="namesYes">Yes</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" value="No" name="optNames" id="namesNo"
                   checked="@(blnNames == false)"
                   @onchange="@(() => { blnNames = !blnNames; })" />
            <label class="form-check-label" for="namesNo">No</label>
        </div>
    </div>
</div>
@if (blnNames)
{
    <div class="row">
        <div class="col-md-12">
            If YES, list the additional name(s) below and specify dates of use for each name (include maiden name, aliases, nicknames, other name changes, legal or otherwise).
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <ArticleAppBlazorServer.Pages.Candidates.CandidatesIncomes.Components.EditorForm Model="@Model" Busy="@Busy"
                                                                                           OnSubmitCallback="@OnSubmitCallback">
            </ArticleAppBlazorServer.Pages.Candidates.CandidatesIncomes.Components.EditorForm>
        </div>
    </div>



    @if (Candidates is null)
    {
        <div>Loading...</div>
    }
    else if (Candidates.Length > 0)
    {
        <div class="row">
            <div class="col-md-12">
                <table class="table table-striped table-bordered">
                    <colgroup>
                        <col style="width: 400px;" />
                        <col style="width: 400px;" />
                        <col style="width: auto;" />
                        <col style="width: 150px;" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th class="text-center">
                                Source of Income
                            </th>
                            <th class="text-center">
                                Annual Amount
                            </th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var m in Candidates)
                        {
                            <tr>
                                <td>
                                    @m.Source
                                </td>
                                <td class="px-3">
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input type="text" class="form-control text-end" value="@(Decimal.Truncate(m.Amount ?? 0))" />
                                        <span class="input-group-text">.00</span>
                                    </div>
                                </td>
                                <td>
                                </td>
                                <td class="text-center">
                                    <input type="button" class="btn btn-danger btn-sm" value="Delete"
                                           @onclick="() => DeleteBy(m)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>
                            </td>
                            <td class="px-3">
                                <label class="form-label fw-bold" for="total-income">Total Gross Annual Income</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="text" class="form-control text-end" id="total-income"
                                           value="@(Decimal.Truncate(Candidates.Sum(it => it.Amount ?? 0)))" />
                                    <span class="input-group-text">.00</span>
                                </div>
                            </td>
                            <td>
                            </td>
                            <td>
                            </td>
                        </tr>
                    </tfoot>
                </table>

            </div>
        </div>
    }
}
@code {
    // 부모 Component 또는 MVC, Razor Pages에서 넘어온 UserId 값을 받아 저장
    [Parameter]
    public string UserId { get; set; } = "945503cc-ed22-4914-b40b-661cdbc732ad";

    // names에 대해서 관리하는지 여부
    [Parameter]
    public bool UseOtherNames
    {
        get
        {
            return blnNames;
        }
        set
        {
            blnNames = value;
        }
    }

    private bool blnNames = true;



    // 현재 페이지에서 사용할 모델 또는 컬렉션
    private CandidateIncome[]? Candidates { get; set; }

    /// <summary>
    /// 페이지 사이즈: 한 페이지에 몇 개의 레코드를 보여줄건지 결정
    /// </summary>
    public int PageSize { get; set; } = 10;

    /// <summary>
    /// 페이지 번호: 현재 보여줄 페이지 번호: 1 페이지, 2 페이지, ...
    /// </summary>
    [Parameter]
    public int? Page { get; set; } = 1; // PageNumber

    /// <summary>
    /// 페이지 인덱스: 현재 보여줄 페이지 번호의 인덱스(PageNumber - 1)
    /// </summary>
    public int PageIndex { get; set; } = 0;

    /// <summary>
    /// 총 몇 개의 페이지가 만들어지는지: Math.Ceiling(총 레코드 수 / 10(한 페이지에서 보여줄))
    /// </summary>
    public int PageCount { get; set; }

    /// <summary>
    /// 레코드 카운트: 현재 테이블에 몇 개의 레코드가 있는지 지정
    /// </summary>
    public int RecordCount { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }

    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            Page = 1;
            //Nav.NavigateTo("/Candidates/CandidatesNames/Index/1");
            return;
        }
        PageIndex = 0;


        // Blazor에서는 반드시 DbContext facotry 사용 권장(필수)
        // https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/
        //Candidates = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext(); // DbContext 생성

        RecordCount = await context.CandidatesIncomes.Where(ui => ui.UserId == UserId).CountAsync();

        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1; // 데이터가 없으면 1 페이지로 초기화
        }

        Candidates = await context.CandidatesIncomes
        .Where(ui => ui.UserId == UserId)
        .OrderByDescending(it => it.Id)
        .ToArrayAsync();
    }


    private async Task DeleteBy(CandidateIncome model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
                    "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidatesIncomes.Remove(model);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException e)
            {

            }

            await DisplayData();
        }
    }
}



@code {
    public CandidateIncome? Model { get; set; }

    //현재 상태 메시지
    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "YJ", LastName = "Park", IsEnrollment = true };
        Model = new(); // new CandidatesIncomes(); 초기화
    }

    protected async Task FormSubmit()
    {
        // 전송 버튼을 누르고 아직 저장 완료가 되지 않았으면 진행 종료: 중복 입력 방지
        if (Busy)
        {
            return;
        }
        Busy = true;

        try
        {
            if (Model is not null)
            {

                using (var ctx = _ContextFactory.CreateDbContext())
                {
                    Model.UserId = UserId;
                    ctx.CandidatesIncomes.Add(Model);
                    ctx.SaveChanges();

                }
                StatusMessage = "Success";

            }

        }
        catch (Exception e)
        {
            StatusMessage = "Error";
        }
        finally
        {
            Busy = false;
            await DisplayData();

            StateHasChanged();
        }
    }


    protected void HandleInvalidSubmit()
    {
        StatusMessage = "";
    }
    /// <summary>
    /// Alert 창을 닫기 위한 메소드
    /// </summary>
    /// <param name="args"></param>
    private void CloseAlert(MouseEventArgs args)
    {
        StatusMessage = null;
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}


