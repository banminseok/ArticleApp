@if (Model is not null)
{
    <EditForm Model="Model" OnValidSubmit="FormSubmit" OnInValidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @* <form action="/Candidates/Create" method="post"> *@
        <div class="form-group">
            <label class="control-label" for="txtFirstName">FirstName</label>
            @* <input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" /> *@
            <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
            @* <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span> *@
            <ValidationMessage For="() => Model.FirstName" />
        </div>
        <div class="form-group">
            <label class="control-label" for="txtLastName">LastName</label>
            @* <input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" /> *@
            <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
            @* <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span> *@
            <ValidationMessage For="() => Model.LastName" />
        </div>
        <div class="form-group form-check">
            <label class="form-check-label" for="IsEnrollment">
                @* <input class="form-check-input" type="checkbox" data-val="true" data-val-required="The IsEnrollment field is required." id="IsEnrollment" name="IsEnrollment" value="true" /> *@
                <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input" />
                Is Enrollment
            </label>
        </div>
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
        </div>
        @* </form> *@
    </EditForm>
 }

@code{
    [Parameter]
    public Candidate? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    protected async Task FormSubmit()
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {

            // 폼의 유효성이 통과되었으면 true를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    /// <summary>
    /// OnInValidSubmit
    /// 유효성 검사 실패 시 처리
    /// Blazor의 OnInvalidSubmit 이벤트는 유효성 검사에 실패했을 때 호출되며, 이벤트 핸들러는 EditContext 객체를 매개변수로 받을 수 있습니다. 이 EditContext는 폼의 상태와 유효성 검사 정보를 포함합니다.
    protected async Task HandleInvalidSubmit(EditContext editContext)
    {
        if (OnSubmitCallback.HasDelegate)  //콜백에 등록된 데리자가 있다면.
        {
            // 폼의 유효성이 통과되지않았으면 false를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(false);
        }
    }
}