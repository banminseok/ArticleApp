@using Dul.Web
<h3>ArticlePager</h3>

<div class="d-flex">

    <ul class="pagination pagination-sm mx-auto">
        @*처음링크*@
        @if (Model.PageNumber ==1)
        {
            <li class="page-item">
                <a class="page-link disabled btn first"><span>처음</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link btn first" @onclick="@(()=>PagerButtonClicked(1))"><span>처음</span></a>
            </li>
        }
        @*이전 n개 링크*@ 
        @if (Model.PageNumber>Model.PagerButtonCount)
        {
            int prevPage = (Model.PageNumber - 1)/ (int)Model.PagerButtonCount*Model.PagerButtonCount; //이전 n개 페이지 번호계산
            <li class="page-item">
                <a class="page-link btn prev" @onclick="@(()=>PagerButtonClicked(prevPage))"><span>-@Model.PagerButtonCount</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link disabled btn prev"><span>-@Model.PagerButtonCount</span></a>
            </li>
        }
        @*이전링크*@ 
        @if (Model.PageNumber > 1)
        {
            int prevPage = Model.PageNumber - 1;
            <li class="page-item">
                <a class="page-link btn prev" @onclick="@(()=>PagerButtonClicked(prevPage))"><span>이전</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link disabled btn prev"><span>이전</span></a>
            </li>
        }


        @*페이지 수만큼 숫자 버튼 출력*@
        @{
            int i = 0; //숫자버튼, 다음 n개 버튼 출력
            int start = Model.PageIndex / (int)Model.PagerButtonCount * Model.PagerButtonCount + 1; //시작 페이지 번호
            int end = (Model.PageIndex / (int)Model.PagerButtonCount+1) * Model.PagerButtonCount ; //끝 페이지 번호
        }
        @for (i = start; i <= end; i++)
        {
            var currentNumber = i; //현재 페이지 번호
            //페이지 수보다 크면 종료
            if (i > Model.PageCount)
            {
                break; //페이지 수보다 크면 종료
            }

            // 현재 보고있는 페이지면 링크 제거
            if (i == Model.PageNumber)
            {
                <li class="page-item active">
                    <a class="page-link current btn disabled"><span style="font-size: 7pt;">@i</span></a>
                </li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link current btn" @onclick="@(() => PagerButtonClicked(currentNumber))"><span style="font-size: 7pt;">@i</span></a>
                </li>
            }
        }
        @*다음링크*@ 
        @if (Model.PageNumber < Model.PageCount)
        {
            int nextPage = Model.PageNumber + 1;
            <li class="page-item">
                <a class="page-link btn next" @onclick="@(()=>PagerButtonClicked(nextPage))"><span>다음</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link disabled btn next"><span>다음</span></a>
            </li>
        }
        @*다음 n개 링크*@ 
        @if (i <= Model.PageCount)
        {
            // 다음 n개 페이지 번호 계산
            int next = Model.PageIndex / (int)Model.PagerButtonCount * Model.PagerButtonCount + Model.PagerButtonCount + 1; //[?]

            <li class="page-item">
                <a class="page-link btn next" @onclick="@(()=>PagerButtonClicked(next))"><span>@(Model.PagerButtonCount)+</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link disabled btn next"><span>@(Model.PagerButtonCount)+</span></a>
            </li>
        }
        @*마지막링크*@ 
        @if (Model.PageNumber != Model.PageCount)
        {
            <li class="page-item">
                <a class="page-link btn last" @onclick="@(()=>PagerButtonClicked(Model.PageCount))"><span>마지막</span></a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link disabled btn last"><span>마지막</span></a>
            </li>
        }
    </ul>
</div>
@code {
    //부모로 부터 모든 페이저 관련된 정보가 담김 PagerBase 개체 받음
    [Parameter]
    public PagerBase Model { get; set; }

    //Parameter 가 넘어오면 자동으로  Pager.PageCount 계산
    protected override Task OnParametersSetAsync()
    {
        Model.PageCount = Convert.ToInt32( System.Math.Ceiling(Model.RecordCount / (double)Model.PageSize) );
        return base.OnParametersSetAsync();
    }

    //부모의 콜백 함수 PageIndexChanged 호출
    [Parameter]
    public EventCallback<int> PageIndexChangedComponent { get; set; }

    //Pager 버튼 클릭할때 현재 클릭한 페이지 번호를 부모에게 전달
    private void PagerButtonClicked(int pageNumber)
    {
        Model.PageIndex = pageNumber-1;
        Model.PageNumber = pageNumber;
        Model.PageCount = Convert.ToInt32(System.Math.Ceiling(Model.RecordCount / (double)Model.PageSize));
        //Model.PagerButtonCount = 5;
        //부모의 콜백 함수 호출
        PageIndexChangedComponent.InvokeAsync(Model.PageIndex);  //PageIndex 를 부모로 전송
    }
}
