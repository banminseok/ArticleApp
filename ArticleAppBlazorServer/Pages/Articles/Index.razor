@page "/Articles"
@page "/Articles/Index"

@using Dul.Web
@using Dul.Domain.Common
@using ArticleAppBlazorServer.Pages.Articles.Components;

@inject IArticleRepository ArticleRepository;


<h3>Index</h3>

<div class="row mb-2">
    <div class="col-md-12">
        <a href="/Articles/Create" class="btn btn-primary">Create</a>
        <AuthorizeView>
            <Authorized>
            </Authorized>
            <NotAuthorized>
                <a href="/Articles/Manage" class="btn btn-primary">Manage</a>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Administrators, Managers">
            <a href="/Articles/Manage" class="btn btn-primary">Manage</a>
        </AuthorizeView>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (articles == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-bordered table-hover">
                <thead class="thead-light">
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Created</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var article in articles)
                    {
                        <tr>
                            <td>@article.Id</td>
                            <td>
                                <a href="/Articles/Details/@article.Id">
                                    @article.Title
                                </a>
                            </td>
                            <td>@article.Created.ToShortTimeString()</td>
                            <td>
                                <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                                <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                                <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-12">
        @* <DulPagerComponent Model="pager" PageIndexChanged="PageIndexChanged"></DulPagerComponent> *@
        <ArticlePager Model="pager" PageIndexChangedComponent="PageIndexChangedIndex"></ArticlePager>
    </div>
</div>
@code {
    [Inject]
    private ILogger<Create> Logger { get; set; }

    private List<Article> articles;

    // 페이저 객체 생성
    private PagerBase pager = new PagerBase()
    {
        PageNumber = 1,
        PageIndex = 0,
        PageSize = 3,
        PagerButtonCount = 5
    };

    /// <summary>
    /// 페이지 로드  
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("※※※ [1]Index 시작");

        //[1] 전체 데이터 출력
        //articles = await ArticleRepository.GetArticlesAsync();

        //[2] 페이징 처리
        try
        {
            PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
            pager.RecordCount = pagingData.TotalRecords; // 전체 레코드 수
            Logger.LogInformation($"※※※ [2] 전체 레코드 수 {pager.RecordCount} , {pager.PageNumber}페이지");
            articles = pagingData.Records.ToList(); // 현재 페이지의 레코드

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "index 오류");
        }
       
    }

    //pager버튼 클릭 콜백 함수
    private async void PageIndexChangedIndex(int pageIndex)
    {
        Logger.LogInformation($"※※※ [3] PageIndexChanged 호출 pageIndex={pageIndex}");
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 전체 레코드 수
        articles = pagingData.Records.ToList(); // 현재 페이지의 레코드

        StateHasChanged(); //현재 페이지를 다시 그림
    }
}
