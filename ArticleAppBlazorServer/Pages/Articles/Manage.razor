@page "/Articles/Manage"

@using Dul.Web
@using Dul.Domain.Common
@using ArticleAppBlazorServer.Pages.Articles.Components;

@inject IArticleRepository ArticleRepository;
@inject IJSRuntime JSRuntime;

<h3>Manage</h3>

<div class="row mb-2">
    <div class="col-md-12">
        <a href="/Articles/Create" class="btn btn-primary">Create</a>
        <AuthorizeView>
            <Authorized>
            </Authorized>
            <NotAuthorized>
                <a href="/Articles/Manage" class="btn btn-primary">Manage</a>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Administrators, Managers">
            <a href="/Articles/Manage" class="btn btn-primary">Manage</a>
        </AuthorizeView>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (articles == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-bordered table-hover">
                <thead class="thead-light">
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Created</th>
                        <th>IsPinned</th>
                        <th>&nbsp;</th>
                        <th>&nbsp;</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var article in articles)
                    {
                        <tr>
                            <td>@article.Id</td>
                            <td>
                                <a href="/Articles/Details/@article.Id">
                                    @article.Title
                                </a>
                            </td>
                            <td>@article.Created.ToShortTimeString()</td>
                            <td>@(article.IsPinned? "공지": "")</td>
                            <td>
                                <a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
                                <a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
                                <a href="/Articles/Delete/@article.Id" class="btn btn-light">Delete</a>
                            </td>
                            <td>
                                <input type="button" value="공지글로 올리기" @onclick="@(()=>PinnedBy(article))" />
                            </td>
                            <td>
                                <input type="button" value="Delete" class="btn btn-danger" 
                                data-toggle="modal" data-target="#articleDeleteDialog" @onclick="@(()=>DeleteBy(article))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-12">
        @* <DulPagerComponent Model="pager" PageIndexChanged="PageIndexChanged"></DulPagerComponent> *@
        <ArticlePager Model="pager" PageIndexChangedComponent="PageIndexChangedIndex"></ArticlePager>
    </div>
    <ArticleDeleteDialog OnClickParam="btnDelete_Click"></ArticleDeleteDialog>

    @if (isShow)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">공지글로 올리기</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="btnClose_Click">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>@(selectArticle.Id)번 글을 공지글로 설정할까요?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
                        <button type="button" class="btn btn-secondary" @onclick="btnClose_Click">닫기</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@code {
    [Inject]
    private ILogger<Create> Logger { get; set; }

    private bool isShow = false;    // 모달 창 표시 여부
    private Article selectArticle = new Article(); // 선택한 항목 (관리)
    private List<Article> articles;

    // 페이저 객체 생성
    private PagerBase pager = new PagerBase()
        {
            PageNumber = 1,
            PageIndex = 0,
            PageSize = 3,
            PagerButtonCount = 5
        };

    /// <summary>
    /// 삭제  
    /// </summary>
    /// <param name="article"></param>
    private void DeleteBy(Article article)
    {
        selectArticle = article;
        Logger.LogInformation($"※※※ [1] 삭제하기 : {selectArticle.Id}");
    }
    /// <summary>
    /// 게시글을 공지로 설정...
    /// </summary>
    /// <param name="article"></param>
    private void PinnedBy(Article article)
    {
        selectArticle = article;
        Logger.LogInformation($"※※※ [1] 공지글로 올리기 : {selectArticle.Id}");
        isShow = true;
    }

    /// <summary>
    /// 공지글로 설정 /해제
    /// </summary>
    private async Task btnTogglePinned_Click()
    {
        selectArticle.IsPinned = !selectArticle.IsPinned; //공지글로 설정/해제 toggle
        await ArticleRepository.EditArticleAsync(selectArticle);

        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 전체 레코드 수
        articles = pagingData.Records.ToList(); // 현재 페이지의 레코드

        isShow = false; //창닫기
        StateHasChanged(); //현재 페이지를 다시 그림
    }

    /// <summary>
    /// 창닫기
    /// </summary>
    private void btnClose_Click()
    {
        isShow = false; //창닫기
        selectArticle = new Article(); //선택한 항목 초기화
    }


    /// <summary>
    /// 삭제 -> 모달 폼 닫기 -> 선택했던 데이터 초기화 -> 전체 데이터 다시 읽어오기 -> Refresh
    /// </summary>
    private async void btnDelete_Click()
    {
        await ArticleRepository.DeleteArticleAsync(selectArticle.Id); // 삭제
        await JSRuntime.InvokeAsync<object>("closeModal", "articleDeleteDialog"); // _Host.cshtml
        selectArticle = new Article(); // 선택 항목 초기화

        var pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        articles = pagingData.Records.ToList();

        StateHasChanged();
    }
    /// <summary>
    /// 페이지 로드
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("※※※ [1]Index 시작");

        //[1] 전체 데이터 출력
        //articles = await ArticleRepository.GetArticlesAsync();

        //[2] 페이징 처리
        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 전체 레코드 수
        Logger.LogInformation($"※※※ [2] 전체 레코드 수 {pager.RecordCount} , {pager.PageNumber}페이지");
        articles = pagingData.Records.ToList(); // 현재 페이지의 레코드
    }

    //pager버튼 클릭 콜백 함수
    private async void PageIndexChangedIndex(int pageIndex)
    {
        Logger.LogInformation($"※※※ [3] PageIndexChanged 호출 pageIndex={pageIndex}");
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords; // 전체 레코드 수
        articles = pagingData.Records.ToList(); // 현재 페이지의 레코드

        StateHasChanged(); //현재 페이지를 다시 그림
    }
}
