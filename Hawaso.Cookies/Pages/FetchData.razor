@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Hawaso.Cookies.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />
@if (Job != null)
{
    <text>현재 접속자의 이름은 @(Name)이고 직업은 @(Job)입니다.</text>
}

@code {
    private WeatherForecast[] forecasts;

    public string Job { get; set; }
    public string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateRef;
        if (authState.User.Identity.IsAuthenticated)
        {
            if (authState.User.Identity.Name == "박용준")
            {
                forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
            }

            //[2] Claims에 저장된 값 출력
            Name = authState.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;
            Job = authState.User.Claims.FirstOrDefault(c => c.Type == "Job").Value;
        }
    }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateRef { get; set; }
}
